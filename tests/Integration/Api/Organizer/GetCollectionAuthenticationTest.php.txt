<?php

namespace App\Tests\Integration\Api\Organizer;

use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use ApiPlatform\Symfony\Bundle\Test\Client;
use App\Entity\Organizer;
use App\Factory\OrganizerFactory;
use App\Factory\UserFactory;
use Symfony\Component\HttpFoundation\Response;
use Zenstruck\Foundry\Test\Factories;
use Zenstruck\Foundry\Test\ResetDatabase;

class GetCollectionAuthenticationTest extends ApiTestCase
{
    use Factories;
    use ResetDatabase;

    /**
     * @var array<int, Organizer>
     */
    private array $organizers;
    private Organizer $privateOrganizer;
    private Client $client;

    protected function setUp(): void
    {
        UserFactory::createMany(3);
        OrganizerFactory::createMany(
            5,
            static function (): array {
                return [
                    'manager' => UserFactory::random(),
                ];
            }
        );

        $this->userAdmin = UserFactory::createOne(
            static function (): array {
                return [
                    'email' => 'userAdmin@example.com',
                    'roles' => ['ROLE_ADMIN'],
                ];
            }
        );
    }

    /**
     *  Get collection route for {@see Organizer} is allowed only for ROLE_ADMIN.
     *  All other users does not have access to this route.
     * @dataProvider dataGetCollectionOrganizers
     */
    public function testGetCollectionOrganizers(string $role, int $statusCode): void
    {
        UserFactory::createOne(
            static function () use ($role): array {
                return [
                    'email' => 'user@example.com',
                    'roles' => [$role],
                ];
            }
        );

        $this->client = $this->createAuthenticatedClient();
        $this->makeRequest();
        self::assertResponseStatusCodeSame($statusCode);
    }

    /**
     * Data provider for {@see testGetCollectionOrganizers}
     * @return array<string, array<string, string>>
     */
    public function dataGetCollectionOrganizers(): array
    {
        return [
            'user' => [
                '$role' => 'ROLE_USER',
                '$statusCode' => Response::HTTP_FORBIDDEN,
            ],
            'user_manager' => [
                '$role' => 'ROLE_MANAGER',
                '$statusCode' => Response::HTTP_FORBIDDEN,
            ],
            'user_admin' => [
                '$role' => 'ROLE_ADMIN',
                '$statusCode' => Response::HTTP_OK,
            ],
        ];
    }

    /**
     * Test will show that only owner of organizer have access to {@see Organizer} object.
     * @dataProvider dataGetItemOrganizers
     */
    public function testGetItemOrganizers(string $email, string $role, int $statusCode): void
    {
        if ($email !== 'user@example.com') {
            $this->createNewUser($email, $role);
        }

        $user = UserFactory::createOne(
            static function (): array {
                return [
                    'email' => 'user@example.com',
                    'roles' => ['ROLE_MANAGER'],
                ];
            }
        );
        $organizer = OrganizerFactory::createOne(
            static function () use ($user): array {
                return [
                    'manager' => $user,
                ];
            }
        );

        $uri = sprintf('/api/organizers/%s', $organizer->getId()->toString());

        $this->client = $this->createAuthenticatedClient($email);
        $this->makeRequest($uri);
        self::assertResponseStatusCodeSame($statusCode);
    }

    /**
     * Data provider for {@see testGetItemOrganizers}
     * @return array<string, array<string, string>>
     */
    public function dataGetItemOrganizers(): array
    {
        return [
            'user_manager' => [
                '$email' => 'user@example.com',
                '$role' => 'ROLE_MANAGER',
                '$statusCode' => Response::HTTP_OK,
            ],
            'other_manager' => [
                '$email' => 'other_manager@example.com',
                '$role' => 'ROLE_MANAGER',
                '$statusCode' => Response::HTTP_FORBIDDEN,
            ],
            'user_admin' => [
                '$email' => 'user_admin@example.com',
                '$role' => 'ROLE_ADMIN',
                '$statusCode' => Response::HTTP_OK,
            ],
        ];
    }

    /**
     * Create authenticated client
     */
    private function createAuthenticatedClient(string $email = 'user@example.com'): Client
    {
        $client = static::createClient();

        $client->request(
            method: 'POST',
            url: '/api/login_check',
            options: [
                'json' => [
                    'username' => $email,
                    'password' => 'secret',
                ],
            ],
        );

        $responseData = json_decode($client->getResponse()->getContent(), true);
        $client->setDefaultOptions([
            'headers' => [
                'Authorization' => 'Bearer ' . $responseData['token'],
            ],
        ]);

        return $client;
    }

    private function makeRequest(string $url = '/api/organizers'): void
    {
        $this->client->request(
            method: 'GET',
            url: $url
        );
    }

    private function createNewUser(string $email, string $role): void
    {
        UserFactory::createOne(
            static function () use ($email, $role): array {
                return [
                    'email' => $email,
                    'roles' => [$role],
                ];
            }
        );
    }
}
